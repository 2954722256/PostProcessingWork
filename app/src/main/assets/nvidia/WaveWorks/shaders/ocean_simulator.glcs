#version 430 core

// #define USE_CONST

#define PI 3.1415926536f
#define BLOCK_SIZE_X 16
#define BLOCK_SIZE_Y 16

#ifdef USE_CONST

const int g_ActualDim;
const int g_InWidth;
const int g_OutWidth;
const int g_OutHeight;
const int g_DtxAddressOffset;
const int g_DtyAddressOffset;

#else
uniform int g_ActualDim;
uniform int g_InWidth;
uniform int g_OutWidth;
uniform int g_OutHeight;
uniform int g_DtxAddressOffset;
uniform int g_DtyAddressOffset;

#endif


uniform float g_Time;
uniform float g_ChoppyScale;

layout (local_size_x = BLOCK_SIZE_X, local_size_y = BLOCK_SIZE_Y) in;

layout (rg32f, binding = 0) uniform imageBuffer g_InputH0;
layout (r32f,  binding = 1) uniform imageBuffer g_InputOmega;
layout (rg32f, binding = 2) uniform imageBuffer g_OutputHt;

void main()
{
   ivec3 DTid = ivec3(gl_GlobalInvocationID);
   
   int in_index = DTid.y * g_InWidth + DTid.x;
   int in_mindex = (g_ActualDim - DTid.y) * g_InWidth + (g_ActualDim - DTid.x);
   int out_index = DTid.y * g_OutWidth + DTid.x;

	// H(0) -> H(t)
   vec2 h0_k  = imageLoad(g_InputH0, in_index).rg;
   vec2 h0_mk = imageLoad(g_InputH0, in_mindex).rg;
   float theta = imageLoad(g_InputOmega, in_index).r * g_Time;
   float sin_v, cos_v;
   sin_v = sin(theta);
   cos_v = cos(theta);
   
   vec2 ht;
	ht.x = (h0_k.x + h0_mk.x) * cos_v - (h0_k.y + h0_mk.y) * sin_v;
	ht.y = (h0_k.x - h0_mk.x) * sin_v + (h0_k.y - h0_mk.y) * cos_v;

	// H(t) -> Dx(t), Dy(t)
	float kx = DTid.x - g_ActualDim * 0.5f;
	float ky = DTid.y - g_ActualDim * 0.5f;
	float sqr_k = kx * kx + ky * ky;
	float rsqr_k = 0.0;
	if (sqr_k > 1e-12f)
		rsqr_k = 1.0 / sqrt(sqr_k);
	//float rsqr_k = 1.0 / sqrtf(kx * kx + ky * ky);
	kx *= rsqr_k;
	ky *= rsqr_k;
	vec2 dt_x = vec2(ht.y * kx, -ht.x * kx);
	vec2 dt_y = vec2(ht.y * ky, -ht.x * ky);
	
	if ((DTid.x < g_OutWidth) && (DTid.y < g_OutHeight))
	{
//        g_OutputHt[out_index] = ht;
//		g_OutputHt[out_index + g_DtxAddressOffset] = dt_x;
//		g_OutputHt[out_index + g_DtyAddressOffset] = dt_y;

        imageStore(g_OutputHt, out_index, vec4(ht, 0, 0));
        imageStore(g_OutputHt, out_index + g_DtxAddressOffset, vec4(dt_x, 0, 0));
        imageStore(g_OutputHt, out_index + g_DtyAddressOffset, vec4(dt_y, 0, 0));
	}
}