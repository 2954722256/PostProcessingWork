#include "WaveWorkCommon.glsl"

layout (local_size_x = MAX_FFT_RESOLUTION) in;

layout(binding =1) buffer g_gauss_input_buffer
{
    float2 g_gauss_input[];
};

layout(binding =2) buffer g_h0_output_buffer
{
    float2 g_h0_output[];
};

void main()
{
    uint3 dispatchThreadId= gl_GlobalInvocationID;
    uint columnIdx = dispatchThreadId.x;
    uint rowIdx = dispatchThreadId.y;

    if(columnIdx < m_resolution)
    {
        int nx = int(columnIdx) - int(m_half_resolution);
        int ny = int(rowIdx) - int(m_half_resolution);
        float nr = sqrt(float(nx*nx + ny*ny));

        float amplitude = 0.0f;
        if((nx !=0U || ny != 0U) && nr >= m_window_in && nr < m_window_out)
        {
            float2 k = float2(nx * m_frequency_scale, ny * m_frequency_scale);

            float kSqr = k.x * k.x + k.y * k.y;
            float kCos = k.x * m_wind_dir.x + k.y * m_wind_dir.y;

            float scale = m_linear_scale * kCos * rsqrt(kSqr * kSqr * kSqr);

            if (kCos < 0)
                scale *= m_wind_scale;

            amplitude = scale * exp(m_power_scale * kSqr + m_root_scale / kSqr);
        }

        int index = int(rowIdx * m_resolution_plus_one + columnIdx);
        float2 h0 = amplitude * g_gauss_input[index - rowIdx];
        g_h0_output[index] = h0;

        // mirror first row/column, CPU and CUDA paths don't do that
        // however, we need to initialize the N+1'th row/column to zero
        if(rowIdx==0 || columnIdx==0)
            g_h0_output[m_resolution_plus_one_squared_minus_one - index] = float2(0); //h0;
    }
}