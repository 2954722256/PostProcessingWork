#include "WaveWorkCommon.glsl"
#include "ComputeCommon.comp"

#if 0
StructuredBuffer<float2> g_h0_input : register(t0);
StructuredBuffer<float> g_omega_input : register(t1);

RWStructuredBuffer<float2> g_ht_output : register(u0);
RWStructuredBuffer<float4> g_dt_output : register(u1);
#else

layout(binding=1) buffer g_h0_input_buffer
{
    float2 g_h0_input[];
};

layout(binding=2) buffer g_omega_input_buffer
{
    float g_omega_input[];
};

layout(binding=3) buffer g_ht_output_buffer
{
    float2 g_ht_output[];
};

layout(binding=4) buffer g_dt_output_buffer
{
    float4 g_dt_output[];
};

#endif

// update Ht, Dt_x, Dt_y from H0 and Omega, fourier transform per row (one CTA per row)
//[numthreads(MAX_FFT_RESOLUTION/2, 1, 1)]
//void ComputeRows( uint3 dispatchThreadId : SV_DispatchThreadID )

layout (local_size_x = MAX_FFT_RESOLUTION/2) in;
void main()
{
    uint3 dispatchThreadId= gl_GlobalInvocationID;
	uint columnIdx = dispatchThreadId.x * 2;
	uint rowIdx = dispatchThreadId.y;
	uint reverseColumnIdx = reversebits(columnIdx) >> m_32_minus_log2_resolution;
	int3 n = int3(reverseColumnIdx - m_half_resolution, reverseColumnIdx, rowIdx - m_half_resolution);

	float2 ht[2], dx[2], dy[2];
	if(columnIdx < m_resolution)
	{
		float4 h0i, h0j;
		dvec2 omega;

		uint h0_index = rowIdx * m_resolution_plus_one + reverseColumnIdx;
		uint h0_jndex = h0_index + m_half_resolution;
		uint omega_index = rowIdx * m_half_resolution_plus_one;
		uint omega_jndex = omega_index + m_half_resolution;

		h0i.xy = g_h0_input[h0_index];
		h0j.xy = g_h0_input[m_resolution_plus_one_squared_minus_one - h0_index];
		omega.x = g_omega_input[omega_index + reverseColumnIdx] * m_time;

		h0i.zw = g_h0_input[h0_jndex];
		h0j.zw = g_h0_input[m_resolution_plus_one_squared_minus_one - h0_jndex];
		omega.y = g_omega_input[omega_jndex - reverseColumnIdx] * m_time;

		// modulo 2 * Pi
		const double oneOverTwoPi = 0.15915494309189533576888376337251;
		const double twoPi = 6.283185307179586476925286766559;
		omega -= floor(float2(omega * oneOverTwoPi)) * twoPi;

		float2 sinOmega, cosOmega;
		sincos(float2(omega), sinOmega, cosOmega);

		// H(0) -> H(t)
		ht[0].x = (h0i.x + h0j.x) * cosOmega.x - (h0i.y + h0j.y) * sinOmega.x;
		ht[1].x = (h0i.z + h0j.z) * cosOmega.y - (h0i.w + h0j.w) * sinOmega.y;
		ht[0].y = (h0i.x - h0j.x) * sinOmega.x + (h0i.y - h0j.y) * cosOmega.x;
		ht[1].y = (h0i.z - h0j.z) * sinOmega.y + (h0i.w - h0j.w) * cosOmega.y;

        bool flag = /*any(bvec3(n.xyz))*/ ((n.x!=0&&n.y!=0)||n.z!=0);  // TODO need validated.
		float2 nr = /*n.xy || n.z*/flag ? rsqrt(float2(n.xy*n.xy + n.z*n.z)) : float2(0);
		float2 dt0 = float2(-ht[0].y, ht[0].x) * nr.x;
		float2 dt1 = float2(-ht[1].y, ht[1].x) * nr.y;

		dx[0] = n.x * dt0;
		dx[1] = n.y * dt1;
		dy[0] = n.z * dt0;
		dy[1] = n.z * dt1;
	}

	fft(ht, dx, dy, dispatchThreadId.x);

	if(columnIdx < m_resolution)
	{
		uint index = rowIdx * m_resolution + dispatchThreadId.x;

		g_ht_output[index] = ht[0];
		g_ht_output[index+m_half_resolution] = ht[1];

		g_dt_output[index] = float4(dx[0], dy[0]);
		g_dt_output[index+m_half_resolution] = float4(dx[1], dy[1]);
	}
}