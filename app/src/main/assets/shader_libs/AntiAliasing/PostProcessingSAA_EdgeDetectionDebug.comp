// Copyright 2012 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies. Intel makes no representations about the
// suitability of this software for any purpose. THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.

#include "PostProcessingSAA_Shared.glsl"

//-----------------------------------------------------------------------------
// Globals
//-----------------------------------------------------------------------------
#if 0
ByteAddressBuffer EdgeHBitArray : register( t0 );
ByteAddressBuffer EdgeVBitArray : register( t1 );
RWTexture2D<float4> Result      : register( u0 );
#else
layout(r32ui, binding = 0) uniform uimageBuffer EdgeHBitArray;
layout(r32ui, binding = 1) uniform uimageBuffer EdgeVBitArray;
layout(rgba8, binding = 2) uniform image2D Result;
#endif

/*[numthreads(1, 1, 1)]
void CSMain( uint3 Coords : SV_GroupID)*/
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint3 Coords = gl_WorkGroupID;
	float4 Color = float4(0.f, 0.f, 0.f, 0.f);

	uint HFlags = imageLoad(EdgeHBitArray, int( (Coords.x >> 5) + (Coords.y * ColorBufferTileCount.x) ) /*<< 2*/).x;
	uint VFlags = imageLoad(EdgeVBitArray, int( (Coords.y >> 5) + (Coords.x * ColorBufferTileCount.y) ) /*<< 2*/).x;

	uint PixelHFlag = (HFlags >> (31u - (Coords.x % 32u))) & 1u;
	uint PixelVFlag = (VFlags >> (31u - (Coords.y % 32u))) & 1u;

	if((PixelHFlag | PixelVFlag) != 0)
	{
		Color.r = float (PixelHFlag & PixelVFlag);
		Color.g = float (PixelHFlag & uint(!bool(PixelVFlag)));  // TODO need check
		Color.b = float (PixelVFlag & uint(!bool(PixelHFlag)));
//		Result[Coords.xy] = Color;
        imageStore(Result, int2(Coords), Color);
	}
}
