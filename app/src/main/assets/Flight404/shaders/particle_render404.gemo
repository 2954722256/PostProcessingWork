#version 330
#extension GL_ARB_gpu_shader5 : enable

layout (points) in;
layout (points, max_vertices = 2) out;

in Particle
{
  vec3 loc;
  vec3 vel;
  float radius;
  float age;
  float lifeSpan;
  float gen;
  float bounceAge;
  uint type;
  
  vec3 tail0;
  vec3 tail1;
  vec3 tail2;
  vec3 tail3;
}vs[];

out vec4 color;

uniform mat4 projection;
uniform mat4 modelView;

uniform bool render_particle = true;

void draw_particle()
{
	float agePer = 1.0 - vs[0].age / vs[0].lifeSpan;
	float diam = vs[0].radius * agePer;
	color = vec4(agePer - .25, agePer * .25, 1.5 - agePer, 1.0);
	
	// transform to the camera coordinate.
	vec4 pos1 = modelView * vec4(vs[0].loc, 1.0);
	vec4 pos2 = pos1;
	pos2.x += (diam * 0.5);
	
	vec4 ppos1 = projection * pos1;
	vec4 ppos2 = projection * pos2;
	
	float psize = distance(ppos1.xyz/ppos1.w, ppos2.xyz/ppos2.w) * 40.0;
	gl_PointSize = psize;
	gl_Position  = ppos1;
	
	EmitVertex();
	
	color = vec4(1, agePer * 0.75, agePer * 0.75, agePer);
	diam *= 0.5;
	pos2.x = pos1.x + diam * 0.5;
	ppos2 = projection * pos2;
	gl_PointSize = psize * 0.5 /*distance(ppos1.xyz/ppos1.w, ppos2.xyz/ppos2.w) * 15.0*/;
	gl_Position  = ppos1;
	EmitVertex();
}

void draw_nebula()
{
	color = unpackUnorm4x8(vs[0].type);
	mat4 mvp = projection * modelView;
	vec4 ppos1 = mvp * vec4(vs[0].loc, 1.0);
	vec4 ppos2 = mvp * vec4(vec3(vs[0].loc.x + vs[0].radius, vs[0].loc.yz), 1.0);
	gl_Position = ppos1;
	
	gl_PointSize = distance(ppos1.xy/ppos1.w, ppos2.xy/ppos2.w) * 10.0;
	EmitVertex();
}

void main()
{
	if(render_particle)
		draw_particle();
	else
		draw_nebula();
}