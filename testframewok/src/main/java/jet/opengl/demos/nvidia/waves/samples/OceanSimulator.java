package jet.opengl.demos.nvidia.waves.samples;

import java.nio.ByteBuffer;
import java.util.Random;

import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL15;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GL31;
import org.lwjgl.opengl.GL33;
import org.lwjgl.opengl.GL42;
import org.lwjgl.opengl.GL43;
import org.lwjgl.util.vector.Vector2f;

import jet.opengl.examples.advance.water.FFT.CSFFT512x512_Plan;
import jet.util.Numeric;
import jet.util.buffer.GLUtil;
import jet.util.check.GLError;
import jet.util.opengl.shader.libs.postprocessing.FrameBufferObject;

public class OceanSimulator {
	
	private static final float HALF_SQRT_2 = 0.7071068f;
	private static final float GRAV_ACCEL = 981.0f;

	private static final int BLOCK_SIZE_X = 16;
	private static final int BLOCK_SIZE_Y = 16;

	final OceanParameter m_param;
	
	// ---------------------------------- GPU shading asset -----------------------------------
	// Displacement map
	int m_pDisplacementMap;   // RGBA32F
	int m_pDisplacementFBO;
	
	// Gradient field
	int m_pGradientMap;       // RGBA16F
	int m_pGradientFBO;
	
	// ----------------------------------- CS simulation data ---------------------------------

	// Initial height field H(0) generated by Phillips spectrum & Gauss distribution.
	int m_pBuffer_Float2_H0;
	int m_pUAV_H0;
	int m_pSRV_H0;
	
	// Angular frequency
	int m_pBuffer_Float_Omega;
	int m_pUAV_Omega;
	int m_pSRV_Omega;
	
	// Height field H(t), choppy field Dx(t) and Dy(t) in frequency domain, updated each frame.
	int m_pBuffer_Float2_Ht;
	int m_pUAV_Ht;
	int m_pSRV_Ht;
	
	// Height & choppy buffer in the space domain, corresponding to H(t), Dx(t) and Dy(t)
	int m_pBuffer_Float_Dxyz;
	int m_pUAV_Dxyz;
	int m_pSRV_Dxyz;
	
	int m_pQuadVB;
	
	// Shaders, layouts and constants
	OceanSimulatorComputeProgram m_pUpdateSpectrumCS;
	OceanSimulatorProgram m_pSimulatorFX;
	
	// FFT wrap-up
	final CSFFT512x512_Plan m_fft_plan = new CSFFT512x512_Plan();
	final Random random = new Random(1015410);
	
	public OceanSimulator(String prefix, OceanParameter params) {
		this.m_param = params;
		
		// Height map H(0)
		int height_map_size = (params.dmap_dim + 4) * (params.dmap_dim + 1);
		Vector2f[] h0_data = new Vector2f[height_map_size/* * sizeof(D3DXVECTOR2)*/];  // TODO
		float[] omega_data = new float[height_map_size/* * sizeof(float)*/];  // TODO
		initHeightMap(params, h0_data, omega_data);
		
		int hmap_dim = params.dmap_dim;
		int input_full_size = (hmap_dim + 4) * (hmap_dim + 1);
		// This value should be (hmap_dim / 2 + 1) * hmap_dim, but we use full sized buffer here for simplicity.
		int input_half_size = hmap_dim * hmap_dim;
		int output_size = hmap_dim * hmap_dim;

		// For filling the buffer with zeroes.
		byte[] zero_data = new byte[3 * output_size * /*sizeof(float)*/ 4 * 2];
//					memset(zero_data, 0, 3 * output_size * sizeof(float) * 2);
		
		// RW buffer allocations
		// H0
		int[] buf = new int[2];
		int float2_stride = 2 * /*sizeof(float)*/ 4;
		createBufferAndUAV(/*h0_data*/ buf, GLUtil.wrapToBytes(h0_data), input_full_size * float2_stride, GL30.GL_RG32F/*, &m_pBuffer_Float2_H0, &m_pUAV_H0, &m_pSRV_H0*/);
		m_pBuffer_Float2_H0 = buf[0];
		m_pUAV_H0 = m_pSRV_H0 = buf[1];
		// Notice: The following 3 buffers should be half sized buffer because of conjugate symmetric input. But
		// we use full sized buffers due to the CS4.0 restriction.

		// Put H(t), Dx(t) and Dy(t) into one buffer because CS4.0 allows only 1 UAV at a time
		createBufferAndUAV(buf, GLUtil.wrap(zero_data), 3 * input_half_size * float2_stride, GL30.GL_RG32F/*, &m_pBuffer_Float2_Ht, &m_pUAV_Ht, &m_pSRV_Ht*/);
		m_pBuffer_Float2_Ht = buf[0];
		m_pSRV_Ht = m_pUAV_Ht = buf[1];
		
		// omega
		createBufferAndUAV(buf, GLUtil.wrapToBytes(omega_data), input_full_size * /*sizeof(float)*/4, GL30.GL_R32F/*, &m_pBuffer_Float_Omega, &m_pUAV_Omega, &m_pSRV_Omega*/);
		m_pBuffer_Float_Omega = buf[0];
		m_pUAV_Omega = m_pSRV_Omega = buf[1];

		// Notice: The following 3 should be real number data. But here we use the complex numbers and C2C FFT
		// due to the CS4.0 restriction.
		// Put Dz, Dx and Dy into one buffer because CS4.0 allows only 1 UAV at a time
		createBufferAndUAV(buf, GLUtil.wrap(zero_data), 3 * output_size * float2_stride, GL30.GL_RG32F/*, &m_pBuffer_Float_Dxyz, &m_pUAV_Dxyz, &m_pSRV_Dxyz*/);
		m_pBuffer_Float_Dxyz = buf[0];
		m_pUAV_Dxyz = m_pSRV_Dxyz = buf[1];
		
		// D3D11 Textures
		createTextureAndViews(buf, hmap_dim, hmap_dim, GL30.GL_RGBA32F/*, &m_pDisplacementMap, &m_pDisplacementSRV, &m_pDisplacementRTV*/);
		m_pDisplacementFBO = buf[0];
		m_pDisplacementMap = buf[1];
		createTextureAndViews(buf, hmap_dim, hmap_dim, GL30.GL_RGBA16F/*, &m_pGradientMap, &m_pGradientSRV, &m_pGradientRTV*/);
		m_pGradientFBO = buf[0];
		m_pGradientMap = buf[1];
		
		// Compute shaders
		m_pUpdateSpectrumCS = new OceanSimulatorComputeProgram(prefix);
		
		// Vertex & pixel shaders
		m_pSimulatorFX = new OceanSimulatorProgram();
		
		// Constant buffers
		int actual_dim = m_param.dmap_dim;
		int input_width = actual_dim + 4;
		// We use full sized data here. The value "output_width" should be actual_dim/2+1 though.
		int output_width = actual_dim;
		int output_height = actual_dim;
		int dtx_offset = actual_dim * actual_dim;
		int dty_offset = actual_dim * actual_dim * 2;
		
		m_pSimulatorFX.enable();
		m_pSimulatorFX.setActualDim(actual_dim);
		m_pSimulatorFX.setInWidth(input_width);
		m_pSimulatorFX.setOutWidth(output_width);
		m_pSimulatorFX.setOutHeight(output_height);
		m_pSimulatorFX.setDxAddressOffset(dtx_offset);
		m_pSimulatorFX.setDyAddressOffset(dty_offset);
		
		m_pUpdateSpectrumCS.enable();
		m_pUpdateSpectrumCS.setActualDim(actual_dim);
		m_pUpdateSpectrumCS.setInWidth(input_width);
		m_pUpdateSpectrumCS.setOutWidth(output_width);
		m_pUpdateSpectrumCS.setOutHeight(output_height);
		m_pUpdateSpectrumCS.setDtxAddressOffset(dtx_offset);
		m_pUpdateSpectrumCS.setDtyAddressOffset(dty_offset);
		
		GL20.glUseProgram(0);
		
		FFT.fft512x512_create_plan(m_fft_plan, 3);
	}
	
	// Initialize the vector field.
	// wlen_x: width of wave tile, in meters
	// wlen_y: length of wave tile, in meters
	void initHeightMap(OceanParameter params, Vector2f[] out_h0, float[] out_omega){
		int i, j;
		Vector2f k = new Vector2f();
		
		Vector2f wind_dir = new Vector2f();
		wind_dir.set(params.wind_dir);
		wind_dir.normalise();
		float a = params.wave_amplitude * 1e-7f;	// It is too small. We must scale it for editing.
		float v = params.wind_speed;
		float dir_depend = params.wind_dependency;

		int height_map_dim = params.dmap_dim;
		float patch_length = params.patch_length;

		for (i = 0; i <= height_map_dim; i++)
		{
			// K is wave-vector, range [-|DX/W, |DX/W], [-|DY/H, |DY/H]
			k.y = (-height_map_dim / 2.0f + i) * (2 * Numeric.PI / patch_length);

			for (j = 0; j <= height_map_dim; j++)
			{
				k.x = (-height_map_dim / 2.0f + j) * (2 * Numeric.PI / patch_length);

				float phil = (float) ((k.x == 0 && k.y == 0) ? 0 : Math.sqrt(phillips(k, wind_dir, v, a, dir_depend)));

				if(out_h0[i * (height_map_dim + 4) + j] == null) out_h0[i * (height_map_dim + 4) + j] = new Vector2f();
				out_h0[i * (height_map_dim + 4) + j].x = (float) (phil * random.nextGaussian() * HALF_SQRT_2);
				out_h0[i * (height_map_dim + 4) + j].y = (float) (phil * random.nextGaussian() * HALF_SQRT_2);

				// The angular frequency is following the dispersion relation:
				//            out_omega^2 = g*k
				// The equation of Gerstner wave:
				//            x = x0 - K/k * A * sin(dot(K, x0) - sqrt(g * k) * t), x is a 2D vector.
				//            z = A * cos(dot(K, x0) - sqrt(g * k) * t)
				// Gerstner wave shows that a point on a simple sinusoid wave is doing a uniform circular
				// motion with the center (x0, y0, z0), radius A, and the circular plane is parallel to
				// vector K.
				out_omega[i * (height_map_dim + 4) + j] = (float) Math.sqrt(GRAV_ACCEL * Math.sqrt(k.x * k.x + k.y * k.y));
			}
		}
	}
	
	void updateDisplacementMap(float time){
		// ---------------------------- H(0) . H(t), D(x, t), D(y, t) --------------------------------
		// Compute shader
		m_pUpdateSpectrumCS.enable();
		
		// Buffers
		GL42.glBindImageTexture(0, m_pSRV_H0, 0, false, 0, GL15.GL_READ_ONLY, GL30.GL_RG32F);
		GL42.glBindImageTexture(1, m_pSRV_Omega, 0, false, 0, GL15.GL_READ_ONLY, GL30.GL_R32F);
		GL42.glBindImageTexture(2, m_pUAV_Ht, 0, false, 0, GL15.GL_WRITE_ONLY, GL30.GL_RG32F);
		
		// Uniforms
		m_pUpdateSpectrumCS.setTime(time * m_param.time_scale);
		m_pUpdateSpectrumCS.setChoppyScale(m_param.choppy_scale);
		
		// Run the CS
		int group_count_x = (m_param.dmap_dim + BLOCK_SIZE_X - 1) / BLOCK_SIZE_X;
		int group_count_y = (m_param.dmap_dim + BLOCK_SIZE_Y - 1) / BLOCK_SIZE_Y;
		GL43.glDispatchCompute(group_count_x, group_count_y, 1);
		
		GL42.glMemoryBarrier(GL42.GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);
		
		GL42.glBindImageTexture(0, 0, 0, false, 0, GL15.GL_READ_ONLY, GL30.GL_RG32F);
		GL42.glBindImageTexture(1, 0, 0, false, 0, GL15.GL_READ_ONLY, GL30.GL_R32F);
		GL42.glBindImageTexture(2, 0, 0, false, 0, GL15.GL_WRITE_ONLY, GL30.GL_RG32F);
		
		// ------------------------------------ Perform FFT -------------------------------------------
		FFT.fft_512x512_c2c(m_fft_plan, m_pUAV_Dxyz, m_pSRV_Dxyz, m_pSRV_Ht);
		GLError.checkError();
		// --------------------------------- Wrap Dx, Dy and Dz ---------------------------------------
		// Push RT
//				int old_viewport_width, old_viewport_height;
//				IntBuffer buf = GLUtil.getCachedIntBuffer(16);
//				GL11.glGetInteger(GL11.GL_VIEWPORT, buf);
//				old_viewport_width = buf.get();
//				old_viewport_height = buf.get();
		
		GL11.glPushAttrib(GL11.GL_VIEWPORT_BIT);
		
		// Set RT
		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, m_pDisplacementFBO);
		GL11.glViewport(0, 0, m_param.dmap_dim, m_param.dmap_dim);
		GL11.glDrawBuffer(GL30.GL_COLOR_ATTACHMENT0);
		GL11.glDisable(GL11.GL_DEPTH_TEST);
		GLError.checkError();
		// VS & PS
		m_pSimulatorFX.enable();  // TODO
//		int bind_program = GL11.glGetInteger(GL20.GL_CURRENT_PROGRAM);
//		System.out.println("bind_program = " + bind_program);
//		System.out.println("m_pSimulatorFX program = " + m_pSimulatorFX.getProgram());
		m_pSimulatorFX.enableUpdateDisplacementPS();
		// Uniforms
		m_pSimulatorFX.setTime(time * m_param.time_scale);
		m_pSimulatorFX.setChoppyScale(m_param.choppy_scale);
		m_pSimulatorFX.setGridLen(m_param.dmap_dim / m_param.patch_length);
		GLError.checkError();
		// Buffer resources
//				m_pSimulatorFX.setSamplerDisplacementMap(m_pSRV_Dxyz);
		GL42.glBindImageTexture(0, m_pSRV_Dxyz, 0, false, 0, GL15.GL_READ_ONLY, GL30.GL_RG32F);
		
//		NvShapes.drawQuad(0);
		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
		
		// ----------------------------------- Generate Normal ----------------------------------------
		// Set RT
		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, m_pGradientFBO);
		GL11.glDrawBuffer(GL30.GL_COLOR_ATTACHMENT0);
		m_pSimulatorFX.enableGenGradientFoldingPS();
		GLError.checkError();
		// Texture resource and sampler
		m_pSimulatorFX.setSamplerDisplacementMap(m_pDisplacementMap);
		GL33.glBindSampler(0, OceanSamplers.m_pPointSamplerState);
//		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_REPEAT);
//		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);
		
//		NvShapes.drawQuad(0);
		GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
		
		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, 0);
		
		GL11.glPopAttrib();
//		GL11.glBindTexture(GL11.GL_TEXTURE_2D, m_pGradientMap);
//		GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
		GL33.glBindSampler(0, 0);
	}
	
	// Phillips Spectrum
	// K: normalized wave vector, W: wind direction, v: wind velocity, a: amplitude constant
	static float phillips(Vector2f K, Vector2f W, float v, float a, float dir_depend)
	{
		// largest possible wave from constant wind of velocity v
		double l = v * v / GRAV_ACCEL;
		// damp out waves with very small length w << l
		double w = l / 1000;

		double Ksqr = K.x * K.x + K.y * K.y;
		double Kcos = K.x * W.x + K.y * W.y;
		double phillips = (a * Math.exp(-1.0 / (l * l * Ksqr)) / (Ksqr * Ksqr * Ksqr) * (Kcos * Kcos));

		// filter out waves moving opposite to wind
		if (Kcos < 0)
			phillips *= dir_depend;

		// damp out waves with very small length w << l
		return (float) (phillips * Math.exp(-Ksqr * w * w));
	}
	
	void createBufferAndUAV(int[] buf, ByteBuffer data, int byte_width, int tex_format){
		// Generate a name for the buffer object, bind it to the 
		// GL_TEXTURE_BINDING, and allocate memory for the buffer.
		
		int buffer = GL15.glGenBuffers();
		GL15.glBindBuffer(GL31.GL_TEXTURE_BUFFER, buffer);
		if(data != null)
			GL15.glBufferData(GL31.GL_TEXTURE_BUFFER, data, GL15.GL_DYNAMIC_COPY);
		else
			GL15.glBufferData(GL31.GL_TEXTURE_BUFFER, byte_width, GL15.GL_DYNAMIC_COPY);
		
		// Generate a new name for texture.
		int texture = GL11.glGenTextures();
		// Bind it toe the buffer texture target to create it
		GL11.glBindTexture(GL31.GL_TEXTURE_BUFFER, texture);
		// Attach the buffer object to the texture and specify format
		GL31.glTexBuffer(GL31.GL_TEXTURE_BUFFER, tex_format, buffer);
		
		GL11.glBindTexture(GL31.GL_TEXTURE_BUFFER, 0);
		GL15.glBindBuffer(GL31.GL_TEXTURE_BUFFER, 0);
		
		buf[0] = buffer;
		buf[1] = texture;
	}
	
	void createTextureAndViews(int[] buf, int width, int height, int format){
		// Create 2D texture
		int texture = GL11.glGenTextures();
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
		GL42.glTexStorage2D(GL11.GL_TEXTURE_2D, 1, format, width, height);
//		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
//		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
//		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_REPEAT);
//		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);
		GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
		int fbo = GL30.glGenFramebuffers();
		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, fbo);
		GL30.glFramebufferTexture2D(GL30.GL_FRAMEBUFFER, GL30.GL_COLOR_ATTACHMENT0, GL11.GL_TEXTURE_2D, texture, 0);
		
		FrameBufferObject.checkFramebufferStatus(fbo);
		
		GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, 0);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
		
		buf[0] = fbo;
		buf[1] = texture;
	}
	
	public void dispose(){
		if(m_fft_plan.program != 0){
			FFT.fft512x512_destroy_plan(m_fft_plan);
			m_fft_plan.program = 0;
		}
		
		if(m_pBuffer_Float2_H0 != 0){
			GL15.glDeleteBuffers(m_pBuffer_Float2_H0);
			m_pBuffer_Float2_H0 = 0;
		}
		
		if(m_pBuffer_Float_Omega != 0){
			GL15.glDeleteBuffers(m_pBuffer_Float_Omega);
			m_pBuffer_Float_Omega = 0;
		}
		
		if(m_pBuffer_Float2_Ht != 0){
			GL15.glDeleteBuffers(m_pBuffer_Float2_Ht);
			m_pBuffer_Float2_Ht = 0;
		}
		
		if(m_pBuffer_Float_Dxyz != 0){
			GL15.glDeleteBuffers(m_pBuffer_Float_Dxyz);
			m_pBuffer_Float_Dxyz = 0;
		}
		
		if(m_pUAV_H0 != 0){
			GL11.glDeleteTextures(m_pUAV_H0);
			m_pUAV_H0 = 0;
			m_pSRV_H0 = 0;
		}
		
		if(m_pUAV_Omega != 0){
			GL11.glDeleteTextures(m_pUAV_Omega);
			m_pUAV_Omega = 0;
			m_pSRV_Omega = 0;
		}
		
		if(m_pUAV_Ht != 0){
			GL11.glDeleteTextures(m_pUAV_Ht);
			m_pUAV_Ht = 0;
			m_pSRV_Ht = 0;
		}
		
		if(m_pUAV_Dxyz != 0){
			GL11.glDeleteTextures(m_pUAV_Dxyz);
			m_pUAV_Dxyz = 0;
			m_pSRV_Dxyz = 0;
		}
		
		if(m_pDisplacementMap != 0){
			GL11.glDeleteTextures(m_pDisplacementMap);
			GL30.glDeleteFramebuffers(m_pDisplacementFBO);
			m_pDisplacementMap = 0;
		}
		
		if(m_pGradientMap != 0){
			GL11.glDeleteTextures(m_pGradientMap);
			GL30.glDeleteFramebuffers(m_pGradientFBO);
			m_pGradientFBO = 0;
		}
		
		if(m_pUpdateSpectrumCS != null){
			m_pUpdateSpectrumCS.dispose();
			m_pUpdateSpectrumCS = null;
		}
		
		if(m_pSimulatorFX != null){
			m_pSimulatorFX.dispose();
			m_pSimulatorFX = null;
		}
	}

	public int getD3D11DisplacementMap() { return m_pDisplacementMap;}
	public int getD3D11GradientMap() { return m_pGradientMap;}
	
}
