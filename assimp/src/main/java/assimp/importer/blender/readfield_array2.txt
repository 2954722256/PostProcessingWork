void readFieldArray(%s[][] out, String name, FileDatabase db, int error_policy){
		int old = db.reader.getCurrentPos();
		final int m = out.length;
		final int n = out.length;
		%s default_value = 0;
		
		try{
			Field f = get(name);
			Structure s = db.dna.get(f.type);
			
			// is the input actually an array?
			if ((f.flags & FieldFlags.FieldFlag_Array) == 0) {
				throw new Error("Field `"+name+"` of structure `"+ name + "` ought to be an array of size " + m + "*" + n);
			}

			db.reader.incPtr(f.offset);

			// size conversions are always allowed, regardless of error_policy
			int i = 0;
			for(; i < Math.min(f.array_sizes[0],m); ++i) {
				int j = 0;
				for(; j < Math.min(f.array_sizes[1],n); ++j) {
					out[i][j] = s.convert%s(db);
				}
				for(; j < n; ++j) {
//					_defaultInitializer<ErrorPolicy_Igno>()(out[i][j]);
					out[i][j] = default_value;
				}
			}
			for(; i < m; ++i) {
//				_defaultInitializer<ErrorPolicy_Igno>()(out[i]);
				Arrays.fill(out[i], default_value);
			}
		}catch(Exception e){
			_defaultInitializer(error_policy, e);
			for(int i = 0; i < m; i++)
				Arrays.fill(out[i], default_value);
		}
		
		// and recover the previous stream position
		db.reader.setCurrentPos(old);
		if(!AssimpConfig.ASSIMP_BUILD_BLENDER_NO_STATS)
			++db.stats().fields_read;
	}